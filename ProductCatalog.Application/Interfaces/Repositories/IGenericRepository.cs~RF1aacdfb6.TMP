using System.Linq.Expressions;

namespace ProductCatalog.Application.Interfaces.Repositories
{
    public interface IGenericRepository<T> where T : class
    {
        Task<IEnumerable<T>> GetAllAsync();
        Task<T?> SingleOrDefaultAsync(Expression<Func<T, bool>> predicate);
        Task<IEnumerable<TResult>> WhereAsync<TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TResult>> selector);
        Task<T?> GetByIdAsync(Guid id);
        Task<T?> GetByIdWithIncludeAsync(Guid id, params Expression<Func<T, object>>[] includes);
        Task AddAsync(T entity);
        Task AddRangeAsync(IEnumerable<T> entities);
        Task UpdateAsync(T entity);
        Task DeleteAsync(T entity);
        Task DeleteRangeAsync(IEnumerable<T> entities);
        Task<IEnumerable<T>> GetPagedAsync(int pageNumber, int pageSize);
        Task ExecuteTransactionAsync(Func<Task> action);
    }
}