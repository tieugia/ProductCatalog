using ProductCatalog.Application.DTOs;
using ProductCatalog.Application.Interfaces.Repositories;
using ProductCatalog.Application.Interfaces.Services;
using ProductCatalog.Domain.Entities;

namespace ProductCatalog.Application.Services
{
    public class CategoryHierarchyService : ICategoryHierarchyService
    {
        private readonly ICategoryHierarchyRepository _categoryHierarchyRepository;

        public CategoryHierarchyService(ICategoryHierarchyRepository categoryHierarchyRepository)
        {
            _categoryHierarchyRepository = categoryHierarchyRepository;
        }

        public async Task<CategoryHierarchyDto> AddCategoryHierarchyAsync(CategoryHierarchyDto dto)
        {
            var categoryHierarchy = new CategoryHierarchy
            {
                ParentId = dto.ParentId,
                ChildId = dto.ChildId
            };
            var createdCategoryHierarchy = await _categoryHierarchyRepository.AddAsync(categoryHierarchy);

            return new CategoryHierarchyDto
            {
                ParentId = createdCategoryHierarchy.ParentId,
                ChildId = createdCategoryHierarchy.ChildId
            };
        }

        public async Task RemoveCategoryHierarchyAsync(CategoryHierarchyDto dto)
        {
            var categoryHierarchy = new CategoryHierarchy
            {
                ParentId = dto.ParentId,
                ChildId = dto.ChildId
            };
            await _categoryHierarchyRepository.DeleteHierarchyAsync(categoryHierarchy);
        }

        public async Task<IEnumerable<CategoryDto>> GetChildrenAsync(Guid parentId)
        {
            var hierarchies = await _categoryHierarchyRepository.GetChildrenAsync(parentId);
            return hierarchies.Select(h => h.Child).Select(c => new CategoryDto
            {
                Id = c.Id,
                Description = c.Description,
                Name = c.Name
            });
        }

        public async Task<IEnumerable<CategoryDto>> GetParentsAsync(Guid childId)
        {
            var hierarchies = await _categoryHierarchyRepository.GetParentsAsync(childId);
            return hierarchies.Select(h => h.Parent).Select(c => new CategoryDto
            {
                Id = c.Id,
                Description = c.Description,
                Name = c.Name
            });
        }
    }
}
